name: Trigger Initial Code Build Pipeline and Deploy to EKS
'on':
  # Manual trigger workflow
  workflow_dispatch:
      # Inputs the workflow accepts.
      # inputs:
      #     environment:
      #         description: "Environment to run the workflow"
      #         type: environment
      #         required: true
env:
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for Terraform state
  ECR_REPOSITORY_AUTH: auth-srv
  ECR_REPOSITORY_CLIENT: client-srv
  ECR_REPOSITORY_TODO: todo-srv
  AWS_REGION: us-east-2
  EKS_CLUSTER: todo-eks
jobs:
  CREATE_KUBE_CONFIG_AND_INGRESS_SERVICE:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name ${{ env.EKS_CLUSTER }}

      - name: Create Postgres db username secret.
        run: kubectl create secret generic pgusername --from-literal=postgres_db_username=${{ secrets.RDS_POSTGRES_DB_USERNAME }}

      - name: Create Postgres db password secret.
        run: kubectl create secret generic pgpassword --from-literal=postgres_db_password=${{ secrets.RDS_POSTGRES_DB_PASSWORD }}

      - name: Create Auth Service Access Key secret.
        run: kubectl create secret generic authserviceaccesskey --from-literal=auth_service_access_key=${{ secrets.AWS_IAM_AUTH_SERVICE_ACCESS_KEY }}
        
      - name: Create Auth Service Secret Key secret.
        run: kubectl create secret generic authservicesecretkey --from-literal=auth_service_secret_key=${{ secrets.AWS_IAM_AUTH_SERVICE_SECRET_KEY }}
        
      - name: Create JWT secret.
        run: kubectl create secret generic jwt --from-literal=jwt_secret=${{ secrets.JWT_SECRET }}

      - name: Create Postgres db url secret.
        run: kubectl create secret generic pgurl --from-literal=postgres_db_url=${{ secrets.RDS_POSTGRES_DB_URL }}

      - name: Create Ingress service
        run: kubectl apply -f k8s/ingress-svc.yml

  DEPLOY_CLIENT_TO_EKS:
    needs: CREATE_KUBE_CONFIG_AND_INGRESS_SERVICE
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name ${{ env.EKS_CLUSTER }}

      - name: Create client deployment
        run: kubectl apply -f k8s/client-depl.yml

      - name: Create client ClusterIp service
        run: kubectl apply -f k8s/client-clusterip-svc.yml

      - name: Create client NodePort service
        run: kubectl apply -f k8s/client-svc.yml

  DEPLOY_AUTH_TO_EKS:
    needs: DEPLOY_CLIENT_TO_EKS
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name ${{ env.EKS_CLUSTER }}

      - name: Create auth deployment
        run: kubectl apply -f k8s/auth-depl.yml

      - name: Create auth ClusterIp service
        run: kubectl apply -f k8s/auth-clusterip-svc.yml

      - name: Create auth NodePort service
        run: kubectl apply -f k8s/auth-svc.yml

  DEPLOY_TODO_TO_EKS:
    needs: DEPLOY_AUTH_TO_EKS
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name ${{ env.EKS_CLUSTER }}

      - name: Create todo deployment
        run: kubectl apply -f k8s/todo-depl.yml

      - name: Create todo ClusterIp service
        run: kubectl apply -f k8s/todo-clusterip-svc.yml

      - name: Create todo NodePort service
        run: kubectl apply -f k8s/todo-svc.yml


      # - name: Login to ECR
      #   run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 715514482422.dkr.ecr.us-east-2.amazonaws.com

      # - name: Deploy Helm
      #   uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.AWS_REGION }}
      #     cluster-name: ${{ env.EKS_CLUSTER }}
      #     name: todo
      #     chart-path: helm/todocharts
      #     namespace: default
      #     values: |
      #       clientimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY_CLIENT }}, 
      #       authimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY_AUTH}}, 
      #       apptag=latest,
      #       todoimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY_TODO}},
      #       AWS_IAM_DYNAMO_DB_ACCESS_KEY=${{ secrets.AWS_IAM_DYNAMO_DB_ACCESS_KEY }},
      #       AWS_IAM_DYNAMO_DB_SECRET_KEY=${{ secrets.AWS_IAM_DYNAMO_DB_SECRET_KEY }},
      #       JWT_SECRET=${{ secrets.JWT_SECRET }},
      #       AWS_DYNAMO_DB_REGION=${{ secrets.AWS_DYNAMO_DB_REGION }},
      #       RDS_POSTGRES_DB_URL=${{ secrets.RDS_POSTGRES_DB_URL }},
      #       RDS_POSTGRES_DB_USERNAME=${{ secrets.RDS_POSTGRES_DB_USERNAME }},
      #       RDS_POSTGRES_DB_PASSWORD=${{ secrets.RDS_POSTGRES_DB_PASSWORD }}
